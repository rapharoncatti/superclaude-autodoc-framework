#!/usr/bin/env node

/**
 * Demo: Automatic Persona Switching with User Override
 * Shows how the system automatically switches personas and allows user control
 */

const ActiveSuperClaudeSession = require('./core/active-superclaude-session.js');

async function demoPersonaSwitching() {
    console.log('üé≠ DEMO: AUTOMATIC PERSONA SWITCHING WITH USER OVERRIDE');
    console.log('======================================================');
    
    try {
        // Initialize session
        const session = new ActiveSuperClaudeSession();
        await session.initializeSession('testing automatic persona switching capabilities');
        
        console.log(`\nüéØ Starting persona: ${session.currentPersona.toUpperCase()}`);
        
        // Demo 1: Automatic switching based on context
        console.log('\n1Ô∏è‚É£ AUTOMATIC CONTEXT-BASED SWITCHING:');
        console.log('üìù User says: "I need to debug this performance issue"');
        
        await session.processRequest('I need to debug this performance issue with memory leaks');
        console.log(`   üé≠ Auto-switched to: ${session.currentPersona.toUpperCase()}`);
        
        // Demo 2: Automatic switching based on command
        console.log('\n2Ô∏è‚É£ AUTOMATIC COMMAND-BASED SWITCHING:');
        console.log('üìù User runs: /secure --audit');
        
        await session.executeCommand('secure', [], ['--audit']);
        console.log(`   üé≠ Auto-switched to: ${session.currentPersona.toUpperCase()}`);
        
        // Demo 3: User override via flag
        console.log('\n3Ô∏è‚É£ USER OVERRIDE VIA FLAG:');
        console.log('üìù User runs: /test --coverage --qa (normally uses qa persona)');
        console.log('üìù But user wants: /test --coverage --frontend (force frontend persona)');
        
        await session.executeCommand('test', [], ['--coverage', '--frontend']);
        console.log(`   üë§ User overrode to: ${session.currentPersona.toUpperCase()}`);
        
        // Demo 4: User override in natural language
        console.log('\n4Ô∏è‚É£ USER OVERRIDE IN NATURAL LANGUAGE:');
        console.log('üìù User says: "optimize this code --performance"');
        
        await session.processRequest('optimize this code for better algorithms --performance');
        console.log(`   üë§ User overrode to: ${session.currentPersona.toUpperCase()}`);
        
        // Demo 5: Workflow with automatic persona coordination
        console.log('\n5Ô∏è‚É£ WORKFLOW WITH AUTOMATIC PERSONA COORDINATION:');
        console.log('üìù User runs: security-audit workflow');
        
        const workflowResult = await session.executeWorkflow('security-audit', ['auth-system']);
        console.log(`   üîÑ Workflow completed with ${workflowResult.phases.length} persona switches`);
        workflowResult.phases.forEach((phase, i) => {
            console.log(`      Phase ${i+1}: /${phase.command} ‚Üí ${phase.persona} persona`);
        });
        
        // Demo 6: Show all available persona flags
        console.log('\n6Ô∏è‚É£ AVAILABLE USER OVERRIDE FLAGS:');
        console.log('   üìã Long form: --persona-architect, --persona-frontend, --persona-security, etc.');
        console.log('   üìã Short form: --architect, --frontend, --security, etc.');
        console.log('   üìã Usage examples:');
        console.log('      ‚Ä¢ /design api-spec --security (force security persona for design)');
        console.log('      ‚Ä¢ /test auth-flow --frontend (force frontend persona for testing)');
        console.log('      ‚Ä¢ "debug this issue --analyzer" (force analyzer persona)');
        
        // Demo 7: Smart recommendations
        console.log('\n7Ô∏è‚É£ SMART WORKFLOW RECOMMENDATIONS:');
        const contexts = [
            'We have a critical security vulnerability',
            'The app is running slowly and users are complaining',
            'I need to implement a new user authentication feature',
            'There are bugs in the payment processing system'
        ];
        
        for (const context of contexts) {
            console.log(`\n   Context: "${context}"`);
            const recommendations = await session.recommendWorkflow(context);
            console.log(`   üéØ Recommended: ${recommendations[0].workflow} (${(recommendations[0].confidence * 100).toFixed(0)}%)`);
            console.log(`   üí° Reason: ${recommendations[0].reason}`);
        }
        
        console.log('\n‚úÖ PERSONA SWITCHING DEMO COMPLETED!');
        console.log('\nüéØ KEY FEATURES DEMONSTRATED:');
        console.log('   ‚úÖ Automatic context-based persona switching');
        console.log('   ‚úÖ Automatic command-based persona switching');
        console.log('   ‚úÖ User override via command flags');
        console.log('   ‚úÖ User override via natural language');
        console.log('   ‚úÖ Workflow-based persona coordination');
        console.log('   ‚úÖ Smart workflow recommendations');
        console.log('   ‚úÖ Flexible flag system (long/short forms)');
        
        console.log('\nüé≠ PERSONA SWITCHING HIERARCHY:');
        console.log('   1. üë§ USER OVERRIDE (highest priority)');
        console.log('   2. üéØ COMMAND DEFAULT (medium priority)');
        console.log('   3. ü§ñ CONTEXT ANALYSIS (automatic fallback)');
        console.log('   4. üìã WORKFLOW COORDINATION (multi-phase)');
        
        console.log('\nüèÜ SYSTEM IS FULLY USER-CONTROLLABLE + AUTO-INTELLIGENT!');
        
    } catch (error) {
        console.error('‚ùå Demo failed:', error.message);
    }
}

// Run the demo
demoPersonaSwitching();